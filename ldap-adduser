#/bin/bash
usage() {
    echo usage ldap-adduser uid --password password --cn Common Name --sn surname --givenName givenName
    exit 1
}
# parse options
if [[ $# == 0 ]] ; then
    usage;
fi

uid="$1"
shift

while [[ $# > 1 ]]
do 
key="$1"
shift

case $key in
    -p|--password)
    export userPassword="$1"
    shift
    ;;
    -w)
    export password="$1"
    shift
    ;;
    --cn)
    export cn="$1"
    shift
    ;;
    --sn)
    export sn="$1"
    shift
    ;;
    --givenName)
    export givenName="$1"
    shift
    ;;
    *)
    shift        # unknown option
    ;;
esac
done

if [[ -z "${userPassword}" || -z "${cn}" || -z "${sn}" || -z "${givenName}" ]]; then
    usage
fi

if [[ -z ${password} ]]; then 
    read -s -p "Enter ldap bind password: " password
fi


main() {
    export uidNumber=$(increment_uid)
    create_user 
    create_home_and_keys
}

increment_uid() { 
    while true; do 
        uidNumber=$(ldapsearch -LLL -D cn=Manager,dc=cluster -b "cn=uid,dc=cluster" -w ${password} uidNumber | grep ^uidNumber | awk '{print $2}')

        ldapmodify -x -D cn=Manager,dc=cluster -w system >/dev/null << END
dn: cn=uid,dc=cluster
changetype: modify
delete: uidNumber
uidNumber: ${uidNumber}
-
add: uidNumber
uidNumber:$(($uidNumber+1))
END
        if [[ $? == 0 ]]; then
            echo $uidNumber;
            return 0;
        fi
        echo "conflict detected"
        sleep 1;
    done
}

create_user() {
        ldapadd -D cn=Manager,dc=cluster -w ${password} << END
dn: cn=${uid},ou=Group,dc=cluster
objectClass: top
objectClass: posixGroup
cn: ${uid}
gidNumber: ${uidNumber}

dn: uid=${uid},ou=People,dc=cluster
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
objectClass: posixAccount
objectClass: shadowAccount
uid: ${uid}
cn: ${cn}   
sn: ${sn}   
givenName: ${givenName}
userPassword: ${userPassword}
loginShell: /bin/bash
uidNumber: ${uidNumber}
gidNumber: ${uidNumber}
homeDirectory: /home/${uid}
END
}
#description: This is an example user
#title: Guinea Pig
#telephoneNumber: +0 000 000 0000
#mobile: +0 000 000 0000
#postalAddress: AddressLine1\$AddressLine2\$AddressLine3

create_home_and_keys() {
    if [[ -d /home/${uid} ]]; then
        echo /home/$uid already exists, we will not create new keys
    else
        mkdir /home/${uid}
        chown -R ${uid}:${uid} /home/${uid}
        su - ${uid} -c "ssh-keygen -f /home/${uid}/.ssh/id_dsa -q -t dsa -N ''"
    fi
    cat > /home/${uid}/.ssh/config << END
UserKnownHostsFile /dev/null
Host *
    StrictHostKeyChecking no
LogLevel QUIET
END
    chown ${uid}:${uid} /home/${uid}/.ssh/config
    chmod 600 /home/${uid}/.ssh/config
}

main
